################################################################################
#
# RevBayes Example: Simulation and species tree inference using the POMO model.
#
# 							SCRIPT 2
# 
# This file: Specifies the full Multispecies coalescent model, simulates data, 
# and then performs inference using the POMO model.
# The species tree is distributed according to a birth-death process.
# Gene trees are distributed according to the Multispecies coalescent model running along this species tree.
# We assume a single effective population size for the entire tree.
# Gene sequences are distributed according to a Continuous Time Markov Chain (GTR) 
# with a relaxed clock (independent rates), and rate variation across sites.
#
# authors: Bastien Boussau and Sebastian Hoehna
#
################################################################################

dataFolder <- "data/"

concatenate <- readDiscreteCharacterData(dataFolder+"concatenate.fasta")


#####################################################
#####################################################
## Species tree reconstruction using concatenation ##
#####################################################
#####################################################

#####################
# Data preparation
#####################

# We need to reload some important variables:
n_species <- 10
n_genes <- 10
n_alleles <- 5
n_sites <- 100
n_branches <- 2 * n_species - 3 # number of branches in a rooted tree

# Species names
for (i in 1:n_species) {
	s_names[i] <- "Species_"+i
}

# Build the mapping between sequence names and species names.
for (i in 1:n_species) {
	for (j in 1:n_alleles) {
		taxa[(i-1)*n_alleles+j] <- taxon(taxonName=s_names[i]+"_"+j, speciesName=s_names[i])
	}
}

# Getting the true species tree
trueSpeciesTree <- readTrees(dataFolder+"speciesTree.tree")[1]

trueNe <- 0.01
trueSpeciation <- 2.0
trueExtinction <- 0.3
trueRootAge <- trueSpeciesTree.rootAge() * 0.0000001 # rescaled wrt the mutation rate


###########################################################
###########################################################
####### Performing inference under the POMO model #########
###########################################################
###########################################################

# Now we're going to analyze the same data, but this time using the POMO model.
# The POMO model bypasses estimating gene trees altogether.
# It assumes complete independence between sites of an alignment (no linkage).
# Therefore it can be used on a concatenate of all the alignments.

# Take a look at the current concatenate:
write(concatenate)

# The POMO models works in a state space that differs from the 4 DNA states.
# In addition to the 4 states, it includes polymorphic states.
# Specifically, it includes 2-state polymorphisms: AC AG AT CG CT GT.
# And it models real populations by a virtual population of size n individuals.
# The result is a model working in a state space of size 4 + 6 * n states.
# First, let's decide on the size of the virtual population.
# De Maio, SchlÃ¶tterer and Kosiol (2013) consider 10 is already pretty good.

virtual_population_size <- 5

# Now, we need to convert the DNA alignment into an alignment in the correct POMO state space.

pomo_concatenate <- pomoStateConvert(concatenate, virtual_population_size, taxa)
concatenate_n_sites <- pomo_concatenate.nchar()[1]

# Take a look at the current concatenate:
write(pomo_concatenate)

#######################
# Preparing the model #
#######################

# Birth-Death process priors.
speciation ~ dnExp(10.0)
extinction ~ dnExp(10.0)
tree_height ~ dnUniform(0.0,10.0)
tree_height.setValue(trueRootAge)

# Species tree from birth-death process
speciesTree ~ dnBDP(lambda=speciation, mu=extinction, rootAge=tree_height, nTaxa=n_species, names=s_names)
speciesTree.setValue(trueSpeciesTree)
speciesTree.rescale(0.0000001)

# Now we have the data for doing inference using the POMO model.
# To define a POMO model, one needs several components.

# First, one needs to define a transition matrix for DNA mutations.
# Here we are going to use a GTR matrix. 
# So we define the GTR matrix.

er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)

sf_prior <- v(1,1,1,1)
sf ~ dnDirichlet(sf_prior)

Q := fnGTR(er,sf) 

# Second, one can have different fitnesses for A, C, G, T. 
# Here, we are going to assume that all 4 bases have the same fitness.
base_fitnesses <- v(1, 1, 1, 1)

# Now we have all the elements to build a POMO matrix to model the evolution of a population of alleles along a species tree.

P := fnPomo(Q, base_fitnesses, virtual_population_size)

# We also need to define root frequencies for all the states.
# To do that we need two variables:

# First, the proportion of polymorphic sites at the root
root_polymorphism_proportion ~ dnBeta(alpha=1,beta=1)

# Second, one needs the root frequencies (we could use those of the GTR matrix but choose to have a non-stationary model):
root_base_frequencies ~ dnDirichlet(sf_prior)

# Now we have all the elements to construct root frequencies for all the states:
root_frequencies := pomoRF (root_base_frequencies, root_polymorphism_proportion, Q, virtual_population_size)
#simplex_root_frequencies := simplex(root_frequencies[1], root_frequencies[2], root_frequencies[3], root_frequencies[4])

# Adding an across site rate variation model, the usual Gamma distribution discretized in 4 categories
shape_prior <- 0.05 
shape ~ dnExponential( shape_prior )
norm_gamma_rates := fnDiscretizeGamma( shape, shape, 4, false )

# We do not assume variation among branches in rates
branch_rates <- 1.0

# We do not assume a proportion of invariant
p_inv ~ dnBeta(alpha=1,beta=1)
p_inv.setValue(0.000001)

###################
# PhyloCTMC Model #
###################

# To link all the parts of the model together we use the phyloCTMC object.

aln ~ dnPhyloCTMC(tree=speciesTree, Q=P, rootFreq=root_frequencies, branchRates=branch_rates, siteRates=norm_gamma_rates, pInv=p_inv, nSites=concatenate_n_sites, type="Pomo")

aln.clamp(pomo_concatenate)
