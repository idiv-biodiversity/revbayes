################################################################################
#
# RevBayes Example: Simulation and species tree inference using the multispecies coalescent, with sequences.
#
# 							SCRIPT 2
# 
# This file: Specifies the full Multispecies coalescent model, simulates data, 
# and then performs inference using the multispecies coalescent, from the sequence data.
# The species tree is distributed according to a birth-death process.
# Gene trees are distributed according to the Multispecies coalescent model running along this species tree.
# We assume a single effective population size for the entire tree.
# Gene sequences are distributed according to a Continuous Time Markov Chain (GTR) 
# with a relaxed clock (independent rates), and rate variation across sites.
#
# authors: Bastien Boussau and Sebastian Hoehna
#
################################################################################

dataFolder <- "data/"

#####################################################
#####################################################
## Species tree reconstruction using concatenation ##
#####################################################
#####################################################

#####################
# Data preparation
#####################

# We need to reload some important variables:
n_species <- 10
n_genes <- 10
n_alleles <- 5
n_sites <- 100
n_branches <- 2 * n_species - 3 # number of branches in a rooted tree

# Species names
for (i in 1:n_species) {
	s_names[i] <- "Species_"+i
}

# Getting the gene trees
for (i in 1:n_genes) {
	trueGeneTrees[i] <- readTrees(file=dataFolder+"geneTree_"+i+".tree")[1]
	geneTreeRootAges[i] <- trueGeneTrees[i].rootAge()
}

# Getting the gene sequences
for (i in 1:n_genes) {
	trueAlns[i] <- readDiscreteCharacterData(dataFolder+"alignment_"+i+".fasta")
}

# Getting the true species tree
trueSpeciesTree <- readTrees(dataFolder+"speciesTree.tree")[1]

trueNe <- 0.01
trueSpeciation <- 2.0
trueExtinction <- 0.3
trueRootAge <- trueSpeciesTree.rootAge()

# Build the mapping between sequence names and species names.
for (i in 1:n_species) {
	for (j in 1:n_alleles) {
		taxa[(i-1)*n_alleles+j] <- taxon(taxonName=s_names[i]+"_"+j, speciesName=s_names[i])
	}
}

###############################
# Inference model construction
###############################

# Birth-Death process priors
speciation ~ dnExp(10.0)
extinction ~ dnExp(10.0)

# A species tree larger than the gene trees has probability 0.
# To be sure to start from a state with a non-null probability, we start from the true values.
tree_height ~ dnUniform(0.0,100.0)
tree_height.setValue(trueRootAge)

write("Starting species tree height: "+tree_height)
write("Compared to smallest gene tree height: " + min(geneTreeRootAges) )


# Species tree from birth-death process
speciesTree ~ dnBDP(lambda=speciation, mu=extinction, rootAge=tree_height, nTaxa=n_species, names=s_names)

speciesTree.setValue(trueSpeciesTree)

write("Proposed starting species tree: ")
write( speciesTree)


# Set the effective population size
Ne ~ dnGamma(shape=1,rate=1)
Ne.setValue(trueNe)

# Simulate gene trees
for (i in 1:n_genes) {
   # The gene tree from the multispecies coalescent process
   # Note that if Ne had been a vector of effective population sizes, 
   # allowing 1 parameter per branch of the species tree, the same line would work.
   geneTrees[i] ~ dnCoalMultiSpeciesConst(speciesTree=speciesTree, Ne=Ne, taxa=taxa)
   geneTrees[i].setValue(trueGeneTrees[i])
}


#######################
# Substitution Models #
#######################

# Here we assume that all genes share the same basic substitution model, a GTR.
# However, the parameters of the models change from one gene family to the next.
for (i in 1:n_genes) {
  er_prior[i] <- v(1,1,1,1,1,1)
  er[i] ~ dnDirichlet(er_prior[i])

  sf_prior[i] <- v(1,1,1,1)
  sf[i] ~ dnDirichlet(sf_prior[i])

  Q[i] := fnGTR(er[i],sf[i]) 

}


###############
# Clock Model #
###############

# Here we assume a simple strict clock model. 
# However, each gene family can have its own rate of evolution.
# Those rate parameters are drawn independently from an exponential distribution.
# This makes it possible to have large differences in rates of evolution between two different gene families. 

for (i in 1:n_genes) {
  familyRates[i] ~ dnExp(1.0)
}

#############################
# Among Site Rate Variation #
#############################

# As for the substitution model and the clock model above, 
# we assume that each gene family has its own set of parameters. 
# Rate variation across sites is handled by a discretized Gamma distribution.

for (i in 1:n_genes) {

  shape_prior[i] <- 0.05 
  shape[i] ~ dnExponential( shape_prior[i] )
  norm_gamma_rates[i] := fnDiscretizeGamma( shape[i], shape[i], 4, false )

}


###################
# PhyloCTMC Model #
###################

# Here we simulate gene family alignments.
# To link all the parts of the model together we use the phyloCTMC object.

for (i in 1:n_genes) {
  alns[i] ~ dnPhyloCTMC(tree=geneTrees[i], Q=Q[i],  branchRates=familyRates[i], siteRates=norm_gamma_rates[i], nSites=n_sites, type="DNA")
  alns[i].clamp(trueAlns[i])
}







