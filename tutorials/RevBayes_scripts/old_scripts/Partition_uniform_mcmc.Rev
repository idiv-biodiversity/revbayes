################################################################################
#
# Example of a Bayesian phylogenetic analysis with different partitition schemes.
# Here we run an MCMC to estimate parameters such as the phylogeny.
# 
# Model:
# uniform unrooted topology
# GTR + gamma model
# one partition for all the data
#
# Data:
# conifer DNA sequences
#
#
# author: Tracy A. Heath, Brian R. Moore and Sebastian Hoehna
#
################################################################################



# read in the character data
data <- readCharacterData("data/conifer_dna.nex")[1]

# Get some useful variables from the data. We need these later on.
taxaCount <- data.ntaxa()
nSites <- data.nchar()[1]
names <- data.names()


# specify the GTR+G substitution model applied uniformly to all sites
erPrior <- v(1,1,1,1,1,1)                                                                      # specify priors for: exchangeability parameters...
er ~ dirichlet(erPrior)
piPrior <- v(1,1,1,1)					                                       # ...stationary frequencies...
pi ~ dirichlet(piPrior)
alphaPrior <- 0.05                                                                             # ...and alpha, the shape parameter that governs the shape of the gamma used to model ASRV
alpha ~ exponential( alphaPrior )

# construct the gamma distributed rate variables
for ( i in 1:4 ) {
  gammaRates[i] := qgamma( i*0.25 - 0.125, alpha, alpha )
}
# now normalize the rates
# this is necessary to keep the parameters identifiable
normGammaRates := normalize( gammaRates )

# add moves for the base frequencies, exchangeability rates and the shape parameter
moves[1] <- mSimplexElementScale(pi, alpha=10.0, tune=true, weight=2.0)                        # moves on the substitution process parameters
moves[2] <- mSimplexElementScale(er, alpha=10.0, tune=true, weight=3.0)                        # these moves only changing one value of the simplex
moves[3] <- mScale(alpha, lambda=1.0, tune=true, weight=1.0)


# create a deterministic variable for the rate matrix
Q := gtr(er,pi)                                                                                # The GTR rate matrix is computed by multiplying the base frequencies with the exchangeability parameters


# Specify a uniform topology prior
tau ~ uniformTopology(taxaCount, names)

# moves on the tree
moves[4] <- mNNI(tau, weight=1.0)

# create a random variable for each branch length
numNodes <- tau.nnodes()
for (i in 1:numNodes) {
  # We use here the exponential distribution with rate 1.0 as the branch length prior
  brlens[i] ~ exponential(1.0)
  
  # Add a move for the branch length. We just take a simple scaling move since the value is a positive real number.
  moves[i+4] <- mScale(brlens[i],lambda=1,tune=true,weight=1) 
}


# Build the tree by combining the topology with the branch length.
psi := treeAssembly(tau, brlens)


# the sequence evolution model
seq ~ substModel(tree=psi, Q=Q, siteRates= normGammaRates, nSites=nSites, type="DNA")

# attach the data
seq.clamp(data)

mymodel <- model(pi)


monitors[1] <- modelmonitor(filename="conifer_uniform.log",printgen=100, separator = "	")
monitors[2] <- filemonitor(filename="conifer_uniform.trees",printgen=100, separator = "	", psi)
monitors[3] <- screenmonitor(printgen=10, separator = "	", pi, alpha)

 
mymcmc <- mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=10000,tuningInterval=1000)
mymcmc.run(generations=100000)

# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
treetrace <- readTreeTrace("conifer_uniform.trees")
# and get the summary of the tree trace
treetrace.summarize()


mapTree(treetrace,"conifer_uniform.tree")


# quit RevBayes. DANGER!!! ;)
q()
