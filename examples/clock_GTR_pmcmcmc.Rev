# Test file for mcmc on gtr model with primates dataset

# read the data
# the readCharacter function returns a vector of matrices. We just take the first one
D <- readCharacterData("data/Primates.nex")[1]

# get some useful variables from the data
taxaCount <- D.ntaxa()
nSites <- D.nchar()[1]
names <- D.names()

# Birth-Death process priors
diversification ~ exponential(0.1)
turnover ~ exponential(0.1)

# moves for the birth-death paramaters
moves[1] <- mScale(diversification,lambda=1,tune=true,weight=1)
moves[2] <- mScale(turnover,lambda=1,tune=true,weight=1)

# tree from birth-death process
tau ~ cBDP(origin = 10.0, diversification, turnover, nTaxa=taxaCount, names=names)

# moves on the tree
moves[3] <- mNNI(tau, weight=1.0)
moves[4] <- mFNPR(tau, weight=1.0)
moves[5] <- mSubtreeScale(tau, weight=5.0)
moves[6] <- mTreeScale(tau, lambda=1.0, tune=true, weight=3.0)
moves[7] <- mNodeTimeSlideUniform(tau, weight=10.0)
moves[8] <- mRootTimeSlide(tau, delta=1.0, tune=true, weight=3.0)

# substition model priors
bf <- v(1,1,1,1)
e <- v(1,1,1,1,1,1)
pi ~ dirichlet(bf)
er ~ dirichlet(e)

# let's set some "reasonable" starting values
# first we look what we had
pi
er
# You could comment these out and see how the convergence of the MCMC is influenced by the starting values.
# Usually these starting values will lead to much faster convergence
pi.setValue( simplex(1,1,1,1) )
er.setValue( simplex(1,1,1,1,1,1) )
# now check the new values
pi
er

# moves on the substitution process parameters
# first some moves only changing one value of the simplex
moves[9] <- mSimplexElementScale(pi, alpha=10.0, tune=true, weight=4.0)
moves[10] <- mSimplexElementScale(er, alpha=10.0, tune=true, weight=6.0)

# the rate matrix
Q := gtr(er,pi)


clockRate <- 1.0

# the sequence evolution model
seq ~ substModel(tree=tau, Q=Q, branchRates=clockRate, nSites=nSites, type="DNA")

# attach the data
seq.clamp(D)

mymodel <- model(pi)

monitors[1] <- modelmonitor(filename="/Users/mlandis/Documents/code/rb_mlandis/Build/Products/Debug/gtr_clock.log",printgen=10, separator = "	")
monitors[2] <- filemonitor(filename="/Users/mlandis/Documents/code/rb_mlandis/Build/Products/Debug/gtr_clock.trees",printgen=10, separator = "	", append=false, chainIdx=true, chainHeat=false, tau)
monitors[3] <- screenmonitor(printgen=10, separator = "	", pi)

 
#mymcmc <- mcmc(mymodel, monitors, moves)
mypmcmcmc <- pmcmcmc(mymodel, monitors, moves, moveschedule="random", numChains=8, numProcessors=8, deltaHeat=0.5, sigmaHeat=1.2, startHeat=0.8, swapInterval=30)

# Note that one mcmc iteration includes 33 proposal (incl. accept/reject) which is the number of moves times their weight.
# If you choose more or different proposals, or different weights for the proposals, then the number of proposals changes per iteration.
# mypmcmcmc.burnin(generations=1000,tuningInterval=100)
mypmcmcmc.run(generations=200)

# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
treetrace <- readTreeTrace("/Users/mlandis/Documents/code/rb_mlandis/Build/Products/Debug/gtr_clock.trees")
# and get the summary of the tree trace
treetrace.summarize()


mapTree(treetrace,"primates_clock_MAP.tre")
