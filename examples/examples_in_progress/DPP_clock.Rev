# Test file for mcmc on gtr model with primates dataset

# read the data
# the readCharacter function returns a vector of matrices. We just take the first one
D <- readCharacterData(file="/Users/tracyh/Code/RevBayes/RevBayesX/DerivedData/RevBayesX/Build/Products/Debug/clock_test/test_data_clock_gtr.nex")[1]
T <- readTrees("/Users/tracyh/Code/RevBayes/RevBayesX/DerivedData/RevBayesX/Build/Products/Debug/clock_test/true_calib_clk.tre")[1]


#######################################
###### birth-death process priors #####
#######################################

div_lambda <- 1.0 / 5.0	
diversification ~ exponential(div_lambda) # d

turn_alpha <- 2.0
turn_beta <- 2.0
turnover ~ beta(turn_alpha, turn_beta) # r

mean_origin <- treeHeight(T) * 1.5	
stdv_origin <- 20.0
origin_time ~ norm(mean_origin, stdv_origin)

rho <- 1.0
birth_rate := diversification / (1.0 - turnover)
death_rate := (turnover * diversification) / (1.0 - turnover)

# get some useful variables from the data
n_taxa <- D.ntaxa()
n_sites <- D.nchar()[1]
names <- D.names()

# tree from birth-death process 
### is/can this function be overloaded draw node ages from BDP on a given topology 
tau ~ cBDP(lambda=birth_rate, mu=death_rate, origin=origin_time, rho=rho, samplingStrategy="uniform", condition="nTaxa", nTaxa=n_taxa, names=names)
tree_height := treeHeight(tau)
tau.setValue(T)


####################################
#### DPP Model on Branch Rates #####
####################################

n_branches <- 2 * n_taxa - 2

## concentration parameter ##
pr_mean_cats <- 3.0
mean_CP <- dppCPFromNum(pr_mean_cats, n_branches) 
cp_shape <- 2.0
cp_rate <- cp_shape / mean_CP
concentration ~ gamma(cp_shape, cp_rate)

## G_0 ##
g0_a <- 4.0
g0_b <- 8.0
g0 <- gamma(g0_a, g0_b)

branch_rates ~ dpp(g0, concentration, n_branches) ## works, I think! yay!
n_cats := DppNumTablesStatistic(branch_rates) ## not yet in language

scale_rate := 1.0 / tree_height

RealPos branch_subrates
for (i in 1:branch_rates.size()) {
	branch_subrates[i] := branch_rates[i] * scale_rate
}

mean_brate := mean(branch_rates) ## Mean func


####################################
##### substition model priors ######
####################################

bf <- v(1,1,1,1)
e <- v(1,1,1,1,1,1)
pi ~ dirichlet(bf)
er ~ dirichlet(e)
# the rate matrix
Q := gtr(er,pi)

# the sequence evolution model
seq ~ substModel(tree=tau, Q=Q, branchRates=branch_subrates, nSites=n_sites, type="DNA")

# attach the data
seq.clamp(D)


moves[1] <- mScale(diversification,lambda=1.0,tune=true,weight=1.0)
moves[2] <- mScale(turnover,lambda=1.0,tune=true,weight=2.0)
moves[3] <- mNodeTimeSlideUniform(tau, weight=30.0)
moves[4] <- mRootTimeSlide(tau, delta=50.0, tune=true, weight=10.0)
moves[5] <- mOriginTimeSlide(origin_time, tau, delta=50.0, tune=true, weight=10.0)
moves[6] <- mSimplexElementScale(pi, alpha=100.0, tune=true, weight=4.0)
moves[7] <- mSimplexElementScale(er, alpha=100.0, tune=true, weight=6.0)
moves[8] <- mDPPScaleCatValsMove(branch_rates, log(2.0), 2.0)
moves[9] <- mDPPAllocateAuxGibbsMove(branch_rates, 4, 2.0)
moves[10] <- mDPPGibbsConcentrationMove(concentration, n_cats, cp_shape, cp_rate, n_branches, 2.0)

mymodel <- model(pi)

monitors[1] <- modelmonitor(filename="dpp_rclock_test.log",printgen=10, separator = "\t")
monitors[2] <- filemonitor(filename="dpp_rclock_test.trees",printgen=10, separator = "\t", tau)
monitors[3] <- screenmonitor(printgen=10, separator = "  ", pi)

mymcmc <- mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=1000,tuningInterval=100)
mymcmc.run(generations=10000)

treetrace <- readTreeTrace("./dpp_rclock_test.trees")
treetrace.summarize()


mapTree(treetrace,"dpp_rclock_test_MAP.tre")
