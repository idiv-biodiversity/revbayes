# File containing examples of the RevLanguage for the RevBayes Workshop in Berkeley, August 2011
# We provide the basic concept for the interactive use of RevBayes with the RevLanguage

##########
# Basics #
##########

# Simple mathematical operators
1 + 1				# Addition
10 - 5				# Subtraction
5 * 5				# Multiplication
10 / 2				# Division
2^3				# Exponentiation
5 % 2                           # Modulo 

#############
# Functions #
#############

# Math-Functions
exp(1)				# exponential function
ln(1)				# logarithmic function with natural base
sqrt(16)			# square root function
power(2,2)			# power function: power(a,b) = a^b


# distribution functions
dexp(x=1,lambda=1)
qexp(0.5,1)
rexp(n=10,1)
dnorm(-2.0,0.0,1.0)
rnorm(n=10,0,1)

###############
# Assignments #
###############

# Variable assignment: constant and deterministic
a <- 1				# assignment of constant node 'a'
a				# printing the value of 'a'
b := exp(a)			# assignment of deterministic node 'b' with the exponential function with parameter 'a'
b				# printing the value of 'b'
c := ln(b)			# assignment of deterministic node 'c' with logarithmic function with parameter 'b'
c				# printing the value of 'c'
d <- ln(b)			# assignment of constant node 'd' with the value if the logarithmic function with parameter 'b'
d				# printing the value of 'd'
e := c == d			
e
a <- 2  			# reassignment of variable a; every deterministic node which has 'a' as a parameter changes its value
a				# printing the value of 'a'
b				# printing the value of 'b'
c				# printing the value of 'c'
d				# printing the value of 'd'
e

a += 2                          # addition assignment
a *= 4                          # multiplication assignment
a -= 3                          # subtraction assignment
a /= 5.0                        # division assignment

++a                             # (pre) increment
a++                             # (post) increment
--a                             # (pre) decrement
a--                             # (post) decrement

# Variable assignment: stochastic
lambda <- 1			# assign constant node 'lambda' with value '1'
x ~ dnExp(lambda)		# create stochastic node with exponential distribution and parameter 'lambda'
x				# print value of stochastic node 'x'
x.probability()			# print the probability if 'x'
x.lnProbability()		# print the log-probability if 'x'
mu <- 0
sigma <- 1
y ~ dnNorm(mu,sigma)	


######################
# Control Structures #
######################

# loops
sum <- 0
for (i in 1:100) {
  sum <- sum + i
}
sum

# Fibonacci series
fib[1] <- 1
fib[2] <- 1
j <- 3
while (j <= 10) {
  fib[j] <- fib[j - 1] + fib[j - 2]
  j++
}
fib

fib[1] <- 1
fib[2] <- 1
for (j in 3:10) {
  fib[j] <- fib[j - 1] + fib[j - 2]
}


#########################
# User defined function #
#########################
# need to remove the previous variables because of renaming
clear()

# simple square function
function RealPos square ( Real x ) { x * x }

a <- square(5.0)
a

# function for computing the factorial
function Natural fac(i) {
   if (i > 1) {
      return i * fac(i-1)
   } else {
      return 1
   }
}
b <- fac(6)
b

# function for computing the sum
function Integer sum(Integer j) {
   if (j > 1) {
      return j + sum(j-1)
   } else {
      return 1
   }
}
c <- sum(100)
c

# function for computing the fibonacci series
function Integer fib(Integer k) {
   if (k > 1) {
      return fib(k-1) + fib(k-2)
   } else {
      return k
   }
}
d <- fib(6)
d









