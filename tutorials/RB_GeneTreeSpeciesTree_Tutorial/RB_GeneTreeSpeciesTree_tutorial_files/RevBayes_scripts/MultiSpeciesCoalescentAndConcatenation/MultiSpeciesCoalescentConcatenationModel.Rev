################################################################################
#
# RevBayes Example: Simulation and species tree inference using the concatenation approach.
#
# 							SCRIPT 2
# 
# This file: Specifies the full Multispecies coalescent model, simulates data, 
# and then performs inference using concatenation.
# The species tree is distributed according to a birth-death process.
# Gene trees are distributed according to the Multispecies coalescent model running along this species tree.
# We assume a single effective population size for the entire tree.
# Gene sequences are distributed according to a Continuous Time Markov Chain (GTR) 
# with a relaxed clock (independent rates), and rate variation across sites.
#
# authors: Bastien Boussau and Sebastian Hoehna
#
################################################################################

dataFolder <- "data/"

concatenate <- readDiscreteCharacterData(dataFolder+"concatenate.fasta")


#####################################################
#####################################################
## Species tree reconstruction using concatenation ##
#####################################################
#####################################################

#####################
# Data preparation
#####################

# We need to reload some important variables:
n_species <- 10
n_genes <- 10
n_alleles <- 5
n_sites <- 100
n_branches <- 2 * n_species - 3 # number of branches in a rooted tree

# Species names
for (i in 1:n_species) {
	s_names[i] <- "Species_"+i
}

# Getting the true species tree
trueSpeciesTree <- readTrees(dataFolder+"speciesTree.tree")[1]


concatenate_n_sites <- concatenate.nchar()[1]

# Then, select one allele per species.
# All alleles are equivalent, there is no reason to choose randomly among them.
# So we choose allele number one for each species, and discard all the other alleles.
for (i in 1:n_species) {
	for (j in 2:n_alleles) {
		concatenate.removeTaxa(s_names[i]+"_"+j)
	}
}

# Take a look at the current concatenate:
write(concatenate)

# Finally we need to rename the remaining taxa.
for (i in 1:n_species) {
	concatenate.setTaxonName(s_names[i]+"_1", s_names[i])
}



###############################
# Inference model construction
###############################


# Birth-Death process priors.
speciation ~ dnExp(10.0)
extinction ~ dnExp(10.0)
tree_height ~ dnUniform(0.0,100.0)
speciation.setValue(2)
extinction.setValue(0.3)

# Species tree from birth-death process
#We assume 1000,000 generations
speciesTree ~ dnBDP(lambda=speciation, mu=extinction, rootAge=tree_height, nTaxa=n_species, names=s_names)

# Second, one needs to define a transition matrix for DNA mutations.
# Here we are going to use a GTR matrix. 
# So we define the GTR matrix.

er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)

sf_prior <- v(1,1,1,1)
sf ~ dnDirichlet(sf_prior)

Q := fnGTR(er,sf) 

# Adding an across site rate variation model, the usual Gamma distribution discretized in 4 categories
shape_prior <- 0.05 
shape ~ dnExponential( shape_prior )
norm_gamma_rates := fnDiscretizeGamma( shape, shape, 4, false )

# We do not assume variation among branches in rates
branch_rates <- 1.0

# We do not assume a proportion of invariant
p_inv ~ dnBeta(alpha=1,beta=1)
p_inv.setValue(0.000001)


# To link all the parts of the model together we use the phyloCTMC object.

aln ~ dnPhyloCTMC(tree=speciesTree, Q=Q, branchRates=branch_rates, siteRates=norm_gamma_rates, pInv=p_inv, type="DNA")

aln.clamp( concatenate )



