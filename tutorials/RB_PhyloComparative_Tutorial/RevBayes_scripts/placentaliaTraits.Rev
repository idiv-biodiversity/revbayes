################################################################################
#
# RevBayes Tutorial:the phylogenetic comparative method
# 
# This file: Correlation analysis of life-history traits in placental mammals
#
# authors: Nicolas Lartillot
#
################################################################################

# read the continous trait data 
contData <- readContinuousCharacterData("data/plac40lhtlog.nex")

# get number of traits 
nTraits <- contData.nchar()[1]

# work under fixed topology
treeArray <- readTrees("data/chronoplac40.tree")
psi <- treeArray[1]

# covariance matrix sigma (of dimension nTraits)
# InverseWishart of parameter Sigma_0 = kappa * I_nTraits, and df=nTraits+2 degrees of freedom
# where kappa is itself a scale parameter

kappa ~ dnLogUniform(min=0.001,max=1000)
df <- nTraits+2
Sigma ~ dnInvWishart(dim=nTraits, kappa=kappa, df=df)

# multivariate Brownian process along the tree
# parameterized by sigma
X ~ dnBrownianMultiVariate(psi,Sigma)

# moves on kappa
index <- 1
moves[index++] = mvScale(kappa, lambda=2.0, tune=true, weight=3.0)

# conjugate Gibbs move on covariance matrix
moves[index++] = mvConjugateInverseWishartBrownian(sigma=Sigma, process=X, kappa=kappa, df=df, weight=1) 

# moves on the Brownian process
moves[index++] = mvMultivariatePhyloProcessSliding(process=X,lambda=1,tune=true,weight=100) 
moves[index++] <- mvMultivariatePhyloProcessTranslation(process=X,lambda=0.1,tune=true,weight=1) 

# condition Brownian model on quantitative trait data
# i.e. clamp the process at the tips of the tree, ot the values observed in extant taxa
# you need to do this trait by trait
for (i in 1:nTraits)	{
	# here we say that the ith entry of the Brownian process should map to the ith. quantitative trait
	X.clampAt(contData,i,i)
}

# get useful functions of the covariance matrix, to be monitored
# here we will monitor

# the rate of evolution of log body mass
var2 := Sigma.covariance(2,2)

# the correlation coefficient between body mass and longevity
r23 := Sigma.correlation(2,3)

# the partial correlation coefficient between mass and longevity
pr23 := Sigma.partialCorrelation(2,3)

# you can also get these variables as a vector
for (i in 1:nTraits)	{
	var[i] := Sigma.covariance(i,i)
}

k <- 1;
for (i in 1:(nTraits-1))	{
	for (j in (i+1):nTraits)	{
		correl[k] := Sigma.correlation(i,j)
		pCorrel[k] := Sigma.partialCorrelation(i,j)
		k <- k+1
	}
}

# get useful outputs from the brownian process
# the mean and the variance across the tree, for each trait
for (i in 1:nTraits)	{
	# mean and stdev of each trait
	meanX[i] := X.mean(i)
	stdevX[i] := X.stdev(i)
}

# create the model
mymodel = model(kappa)

# create the monitors
# some of them are a bit redundant, but just to show what can be done

# on screen, we will monitor only the correlation coefficient and the mean value of each trait
monitors[1] = mnScreen(printgen=10, var2, correl, meanX)

# a trace monitor: like the screen monitor, but directly into file
monitors[2] = mnFile(filename="output/plactraits.trace", printgen=10, separator = "	", var2, correl, meanX)

# file monitors for the correlation and partial correlation coefficients
monitors[3] = mnFile(filename="output/plactraits.correl",printgen=10, separator = "	", correl, pCorrel)

# a file monitor for the complete covariance matrix
monitors[4] = mnFile(filename="output/plactraits.cov",printgen=10, separator = "	", Sigma)

# a file monitor for the evolution of traits along the tree (in newick format)
monitors[5] = mnFile(filename="output/plactraits.traits",printgen=10, separator = "	", X)

# a model monitor
monitors[6] = mnModel(filename="output/plactraits.log",printgen=10, separator = "	")
 
mymcmc = mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=200,tuningInterval=50)

mymcmc.run(1000)

# some post analysis here

