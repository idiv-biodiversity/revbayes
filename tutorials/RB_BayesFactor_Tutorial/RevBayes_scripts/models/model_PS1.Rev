################################################################################
#
# RevBayes Exercise: Bayesian inference using MCMC and output analysis
# 
# This file: Specifies the full model parameters and moves for a 3-gene
#        partition model
#
# authors: Tracy A. Heath, Michael Landis, Sebastian Hoehna and Brian R. Moore
#
################################################################################


#######################
# Reading in the Data #
#######################

# read in the character data
filenames <- v("data/fagus_ITS.nex", "data/fagus_rbcL.nex", "data/fagus_matK.nex")

n_parts <- filenames.size()
for (i in 1:n_parts) {
  data[i] <- readDiscreteCharacterData(filenames[i])
  n_sites[i] <- data[i].nchar(1)
}

# Get some useful variables from the data. We need these later on.
n_species <- data[1].ntaxa()
names <- data[1].names()
n_branches <- 2 * n_species - 3

#################################
# Subsitution Model #
#   Loop over each partition   #
#################################
  
mi <- 1
for (i in 1:n_parts){

  er_prior[i] <- v(1,1,1,1,1,1)
  er[i] ~ dnDirichlet(er_prior[i])
  moves[mi++] = mvSimplexElementScale(er[i], alpha=10, tune=true, weight=3) 

  pi_prior[i] <- v(1,1,1,1)
  pi[i] ~ dnDirichlet(pi_prior[i])
  moves[mi++] = mvSimplexElementScale(pi[i], alpha=10, tune=true, weight=2) 

  Q[i] := fnGTR(er[i],pi[i]) 

  alpha_prior_min[i] <- 0.1
  alpha_prior_max[i] <- 50.0
  alpha[i] ~ dnUnif( alpha_prior_min[i], alpha_prior_max[i] )
  norm_gamma_rates[i] := fnDiscretizeGamma( alpha[i], alpha[i], 4, false )
  moves[mi++] = mvScale(alpha[i], lambda=0.8, tune=true, weight=3.0)

}

# create a rate multiplier for each partitition that scales the tree
part_rate_mult_prior <- rep(1.0,n_parts)
part_rate_mult ~ dnDirichlet( part_rate_mult_prior )

moves[mi++] = mvSimplexElementScale(part_rate_mult, alpha=10, tune=true, weight=2.0)



##############
# Tree model #
##############

# Specify a uniform topology prior
topology ~ dnUniformTopology(n_species, names)

# moves on the tree
moves[mi++] = mvNNI(topology, weight=10.0)

#### Specify a prior and moves on the branch lengths #### 
# create a random variable for each branch length using a for loop
for (i in 1:n_branches) {
  # We use here the exponential distribution with rate 1.0 as the branch length prior
  br_lens[i] ~ dnExponential(10.0)
  
  # Add a move for the branch length. We just take a simple scaling move since the value is a positive real number.
  moves[mi++] = mvScale(br_lens[i],lambda=1,tune=true,weight=1) 
}
# create a deterministic variable for monitoring purposes
TL := sum(br_lens)

# Build the tree by combining the topology with the branch length.
phylogeny := treeAssembly(topology, br_lens)





###################
# PhyloCTMC Model #
###################


for (i in 1:n_parts) {
  phyloSeq[i] ~ dnPhyloCTMC(tree=phylogeny, Q=Q[i], branchRates=part_rate_mult[i], siteRates=norm_gamma_rates[i], type="DNA")
  phyloSeq[i].clamp(data[i])
}



#############
# THE Model #
#############

mymodel = model(topology)

