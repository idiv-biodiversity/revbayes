################################################################################
#
# RevBayes Exercise: Bayesian inference using MCMC and output analysis
# 
# This file: Specifies the full model parameters and moves for a single, uniform
#				partition model
#
# authors: Tracy A. Heath, Michael Landis, Sebastian Hoehna and Brian R. Moore
#
################################################################################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

data_ITS <- readDiscreteCharacterData("data/fagus_ITS.nex")
data_rbcL <- readDiscreteCharacterData("data/fagus_rbcL.nex")
data_matK <- readDiscreteCharacterData("data/fagus_matK.nex")

### Create concatenated data matrix
data <- data_ITS + data_rbcL + data_matK

# Get some useful variables from the data. We need these later on.
n_species <- data.ntaxa()
n_sites <- data.nchar(1)
names <- data.names()
n_branches <- 2 * n_species - 3

mi <- 1

#### specify the GTR+G+I substitution model applied uniformly to all sites ###
er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)
moves[mi++] = mvSimplexElementScale(er, alpha=10.0, tune=true, weight=3.0)


pi_prior <- v(1,1,1,1) 
pi ~ dnDirichlet(pi_prior)
moves[mi++] = mvSimplexElementScale(pi, alpha=10.0, tune=true, weight=2.0)


#### create a deterministic variable for the rate matrix ####
Q := fnGTR(er,pi) 


alpha_prior_min <- 0.1
alpha_prior_max <- 50.0
alpha ~ dnUnif( alpha_prior_min, alpha_prior_max )
norm_gamma_rates := fnDiscretizeGamma( alpha, alpha, 4, false )

# add moves for the stationary frequencies, exchangeability rates and the shape parameter
moves[mi++] = mvScale(alpha, lambda=0.8, tune=true, weight=3.0)


#### Specify a uniform prior on the tree topology #### 
topology ~ dnUniformTopology(n_species, names)

# moves on the tree
moves[mi++] = mvNNI(topology, weight=10.0)


#### Specify a prior and moves on the branch lengths #### 
# create a random variable for each branch length using a for loop
for (i in 1:n_branches) {
  # We use here the exponential distribution with rate 1.0 as the branch length prior
  br_lens[i] ~ dnExponential(10.0)
  
  # Add a move for the branch length. We just take a simple scaling move since the value is a positive real number.
  moves[mi++] = mvScale(br_lens[i],lambda=1,tune=true,weight=1) 
}

TL := sum(br_lens)

# Build the tree by combining the topology with the branch length.
phylogeny := treeAssembly(topology, br_lens)


# the sequence evolution model
phyloSeq ~ dnPhyloCTMC(tree=phylogeny, Q=Q, siteRates=norm_gamma_rates, type="DNA")

# attach the data
phyloSeq.clamp(data)

mymodel = model(pi)


