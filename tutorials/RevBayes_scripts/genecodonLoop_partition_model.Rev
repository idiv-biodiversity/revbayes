################################################################################
#
# RevBayes Exercise: Calculating Marginal Liklihoods and Bayes Factors to test
#  data partitioning strategies
# 
# This file: Specifies the full model parameters and moves for a 2-gene
#        partition model
#
# authors: Tracy A. Heath, Michael Landis, and Sebastian Hoehna
#
################################################################################


# read in the character data
data[1] <- readCharacterData("data/conifer_atpB.nex")[1]
data_rbcL <- readCharacterData("data/conifer_rbcL.nex")[1]

n_sites_rbcL <- data_rbcL.nchar()[1]

vec_1pos <- seq(1,n_sites_rbcL,3)
vec_2pos <- seq(2,n_sites_rbcL,3)
vec_3pos <- seq(3,n_sites_rbcL,3)

data[2] <- data_rbcL
data[3] <- data_rbcL
data[4] <- data_rbcL

for(i in vec_1pos){
   data[3].excludeCharacter(i)
   data[4].excludeCharacter(i)
}
for(i in vec_2pos){
   data[2].excludeCharacter(i)
   data[4].excludeCharacter(i)
}
for(i in vec_3pos){
   data[2].excludeCharacter(i)
   data[3].excludeCharacter(i)
}

n_sites[1] <- data[1].nchar()[1]
n_sites[2] <- vec_1pos.size()
n_sites[3] <- vec_2pos.size()
n_sites[4] <- vec_3pos.size()



n_parts <- data.size()


# Get some useful variables from the data. We need these later on.
n_species <- data[1].ntaxa()
names <- data[1].names()
n_branches <- 2 * n_species - 2



#################################
# Subsitution Model #
#   Loop over each partition   #
#################################
  
mv_idx <- 0
for (i in 1:n_parts){

  er_prior[i] <- v(1,1,1,1,1,1)
  er[i] ~ dnDirichlet(er_prior[i])
  moves[mv_idx++] <- mvSimplexElementScale(er[i], alpha=10.0, tune=true, weight=3.0)

  sf_prior[i] <- v(1,1,1,1)
  sf[i] ~ dnDirichlet(sf_prior[i])
  moves[mv_idx++] <- mvSimplexElementScale(sf[i], alpha=10.0, tune=true, weight=2.0) 

  Q[i] := gtr(er[i],sf[i])

  shape_prior[i] <- 0.05
  shape[i] ~ dnExponential( shape_prior[i] )
  norm_gamma_rates := discretizeGamma( shape[i], 4 )

  # add moves for the stationary frequencies, exchangeability rates and the shape parameter
  moves[mv_idx++] <- mvScale(shape[i], lambda=1.0, tune=true, weight=1.0)

}




# Specify a uniform topology prior
topology ~ uniformTopology(n_species, names)

# moves on the tree
moves[mv_idx++] <- mvNNI(topology, weight=1.0)

#### Specify a prior and moves on the branch lengths #### 
# create a random variable for each branch length using a for loop
for (i in 1:n_branches) {
  # We use here the exponential distribution with rate 1.0 as the branch length prior
  br_lens[i] ~ exponential(1.0)
  
  # Add a move for the branch length. We just take a simple scaling move since the value is a positive real number.
  moves[mv_idx++] <- mvScale(br_lens[i],lambda=1,tune=true,weight=1) 
}


# Build the tree by combining the topology with the branch length.
phylogeny := treeAssembly(topology, br_lens)



for (i in 1:n_parts){
  phyloSeq[i] ~ phyloCTMC(tree=phylogeny, Q=Q[i], siteRates=norm_gamma_rates[i], nSites=n_sites[i], type="DNA")
  phyloSeq[i].clamp(data[i])
}


mymodel <- model(topology)

