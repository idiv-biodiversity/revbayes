################################################################################
#
# RevBayes Exercise: Bayesian inference of phylogeny under different 
#                    subsitution models.
# 
# This file: Specifies the full HKY model with parameters and moves 
#            for a single, uniform partition model
#
# authors: Tracy A. Heath, Michael Landis, Sebastian Hoehna and Brian R. Moore
#
################################################################################



#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

data_ITS <- readDiscreteCharacterData("data/fagus_ITS.nex")
data_rbcL <- readDiscreteCharacterData("data/fagus_rbcL.nex")
data_matK <- readDiscreteCharacterData("data/fagus_matK.nex")

### Create concatenated data matrix
data <- data_ITS + data_rbcL + data_matK

# Get some useful variables from the data. We need these later on.
n_species <- data.ntaxa()
n_sites <- data.nchar(1)
names <- data.names()
n_branches <- 2 * n_species - 3

mi <- 0





######################
# Substitution Model #
######################

#### specify the HKY substitution model applied uniformly to all sites ###
kappa ~ dnLnorm(1.0,1.25)
moves[mi++] = mvScale(kappa)


pi_prior <- v(1,1,1,1) 
pi ~ dnDirichlet(pi_prior)
moves[mi++] = mvSimplexElementScale(pi)


#### create a deterministic variable for the rate matrix ####
Q := fnHKY(kappa,pi) 





##############
# Tree model #
##############

#### Specify a uniform prior on the tree topology #### 
topology ~ dnUniformTopology(n_species, names)

# moves on the tree
moves[mi++] = mvNNI(topology)


#### Specify a prior and moves on the branch lengths #### 
# create a random variable for each branch length using a for loop
for (i in 1:n_branches) {
  # We use here the exponential distribution with rate 1.0 as the branch length prior
  br_lens[i] ~ dnExponential(10.0)
  
  # Add a move for the branch length. We just take a simple scaling move since the value is a positive real number.
  moves[mi++] = mvScale(br_lens[i]) 
}

TL := sum(br_lens)

# Build the tree by combining the topology with the branch length.
phylogeny := treeAssembly(topology, br_lens)





###############
# Clock Model #
###############

# we could specify here a rate scalar or something similar, for examble different rate per branch
# in this case we keep the rate multiplier by 1.0
clockRate <- 1.0



###################
# PhyloCTMC Model #
###################


# the sequence evolution model
seq ~ dnPhyloCTMC(tree=phylogeny, Q=Q, branchRates=clockRate, type="DNA")

# attach the data
seq.clamp(data)




#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model(Q)





