#
# Tutorial -- the phylogenetic comparative method
# Correlation analysis: rates, dates and life-history traits in placental mammals
# Nicolas Lartillot -- July 2014
#

######### 
# data
#########

# read the quantitative trait data 
contData <- readCharacterData("data/plac40lhtlog.nex")

# get some useful variables from the data
nTraits <- contData.nchar()[1]

# read the sequence data
# the readCharacter function returns a vector of matrices. We just take the first one
seqData <- readCharacterData("data/plac40_4fold.nex")

# get some useful variables from the data
nTaxa <- seqData.ntaxa()
names <- seqData.names()
nSites <- seqData.nchar()[1]


######### 
# tree  
#########

# create a birth death process, leading to a tree whose tips match the taxon names given by the dataset

speciation ~ dnLogUniform(0.001,1000)
extinction ~ dnLogUniform(0.001,1000)

# rough estimate of sampling fraction: 40 placental mammals out of the ~4000 currently existing out there
sampling_fraction <- 0.01

psi ~ dnBDP(lambda=speciation, mu=extinction, rho=sampling_fraction, rootAge=1.0, nTaxa=nTaxa, names=names)

# work under fixed, externally provided, tree topology
treeArray <- readTrees("data/chronoplac40.tree")
fixedTree <- treeArray[1]
psi.setValue(fixedTree)


######### 
# rate and trait evolution
#########

# covariance matrix of dimension nTraits + 1
# first entry will be log of substitution rate
# then all other entries will stand for the life-history traits

# covariance matrix is inverse Wishart of parameters kappa * Identity and df = nTraits+3 degrees of freedom
# where kappa is itself a scaling factor

kappa ~ dnLogUniform(min=0.001,max=1000)
kappa.setValue(0.1)
df <- nTraits+3
covdim <- nTraits+1

Sigma ~ dnInvWishart(dim=covdim, kappa=kappa, df=df)

# multivariate Brownian process along the tree
X ~ dnBrownianMultiVariate(psi,sigma=Sigma)

# first component of the Brownian model gives the *log* of the substitution rate
# so we take the exponential and average over branches
# traitindex = 1: because we want to take the exponential of the first component of the multivariate Brownian process
rate := expbranchtree(tree=psi,process=X,traitindex=1)

# other copmonents of the Brownian process correspond to life-history traits
# so we clamp the process at the tips of the tree, at the values observed in extant taxa
# you need to do this trait by trait
for (i in 1:nTraits)	{

	# here we say that the (i+1)th entry of the Brownian process should map to the ith. quantitative trait
	X.clampAt(contData,i+1,i)
}

# get useful functions of the covariance matrix, to be monitored
for (i in 1:covdim)	{
	var[i] := Sigma.covariance(i,i)
}

k <- 1;
for (i in 1:(covdim-1))	{
	for (j in (i+1):covdim)	{
		correl[k] := Sigma.correlation(i,j)
		pCorrel[k] := Sigma.partialCorrelation(i,j)
		k <- k+1
	}
}

# get useful outputs from the brownian process
# the mean and the variance across the tree, for each trait
for (i in 1:covdim)	{
	meanX[i] := X.mean(i)
	stdevX[i] := X.stdev(i)
}


######### 
# substitution process
#########

# equilibrium frequencies 
bf <- v(1,1,1,1)
pi ~ dnDirichlet(bf)

# exchangeabilities
e <- v(1,1,1,1,1,1)
er ~ dnDirichlet(e)

# rate matrix
Q := fnGTR(er,pi)

# create the sequence evolution model
seq ~ dnPhyloCTMC(tree=psi, Q=Q, branchRates=rate, nSites=nSites, type="DNA")

# condition on sequence alignment
seq.clamp(seqData)

# create model
mymodel <- model(kappa)

mymodel.gv("placentaliaDatesRatesTraits_DAG.dot")

######### 
# moves
#########

# initializing index
index <- 1

# rescaling moves on speciation and extinction rates
moves[index] <- mvScale(speciation, lambda=1, tune=true, weight=3.0)
index <- index + 1
moves[index] <- mvScale(extinction, lambda=1, tune=true, weight=3.0)
index <- index + 1

# moves on the tree: only relative dates
moves[index] <- mvSubtreeScale(psi, weight=5.0)
index <- index + 1
moves[index] <- mvNodeTimeSlideUniform(psi, weight=10.0)
index <- index + 1

# if we wanted to, we could also move the tree topology
# and integrate over the posterior induced by the sequence data
# but mixing is currently a bit challenging 
 moves[index] <- mvNNI(psi, weight=5.0)
 index <- index + 1
 moves[index] <- mvFNPR(psi, weight=5.0)
 index <- index + 1

# moves on kappa
moves[index] <- mvScale(kappa, lambda=2.0, tune=true, weight=3.0)
index <- index + 1

# conjugate Gibbs move on covariance matrix
moves[index] <- mvConjugateInverseWishartBrownian(sigma=Sigma, process=X, kappa=kappa, df=df, weight=1) 
index <- index + 1

# moves on the Brownian process
moves[index] <- mvMultivariatePhyloProcessSliding(process=X,lambda=1,tune=true,weight=100) 
index <- index + 1
moves[index] <- mvMultivariatePhyloProcessTranslation(process=X,lambda=0.1,tune=true,weight=1) 
index <- index + 1

# moves on the substitution process parameters
moves[index] <- mvSimplexElementScale(pi, alpha=10.0, tune=true, weight=1.0)
index <- index + 1
moves[index] <- mvSimplexElementScale(er, alpha=10.0, tune=true, weight=1.0)
index <- index + 1

######### 
# monitors
#########

# screen monitor
monitors[1] <- mnScreen(printgen=10, speciation, extinction, correl, meanX)

# similar monitor, but directly into file
monitors[2] <- mnFile(filename="output/placdatesratestraits.trace", printgen=10, separator = "	", speciation, extinction, correl, var, meanX)

# file monitors for the correlation and partial correlation coefficients
monitors[3] <- mnFile(filename="output/placdatesratestraits.correl",printgen=10, separator = "	", correl, pCorrel)

# a file monitor just for the covariance matrix
monitors[4] <- mnFile(filename="output/placdatesratestraits.cov",printgen=10, separator = "	", Sigma)

# a file monitor for the evolution of traits along the tree (in newick format)
monitors[5] <- mnFile(filename="output/placdatesratestraits.traits",printgen=10, separator = "	", X)

# monitoring the trees and dates
monitors[6] <- mnFile(filename="output/placdatesratestraits.trees",printgen=10, separator = "	", psi)

# a model monitor
monitors[7] <- mnModel(filename="output/placdatesratestraits.log",printgen=10, separator = "	")
 
mymcmc <- mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=100,tuningInterval=100)

mymcmc.run(100000)


