################################################################################
#
# RevBayes Exercise: Calculating Marginal Liklihoods and Bayes Factors to test
#  data partitioning strategies
# 
# This file: Specifies the full model parameters and moves for a 2-gene
#        partition model
#
# authors: Tracy A. Heath, Michael Landis, and Sebastian Hoehna
#
################################################################################


# read in the character data
filenames <- v("data/conifer_atpb.nex", "data/conifer_rbcL.nex")

n_parts <- filenames.size()
for (i in 1:n_parts){
  data[i] <- readCharacterData(filenames[i])[1]
}

# Get some useful variables from the data. We need these later on.
n_species <- data[1].ntaxa()
names <- data[1].names()
n_branches <- 2 * n_species - 2

#################################
# Subsitution Model #
#   Loop over each partition   #
#################################
  
mv_it <- 0
for (i in 1:n_parts){

  er_prior[i] <- v(1,1,1,1,1,1)
  er[i] ~ dnDirichlet(er_prior[i])
  moves[mv_it++] <- mvSimplexElementScale(er[i], alpha=10, tune=true, weight=3) 

  sf_prior[i] <- v(1,1,1,1)
  sf[i] ~ dnDirichlet(sf_prior[i])
  moves[mv_it++] <- mvSimplexElementScale(sf[i], alpha=10, tune=true, weight=2) 

  Q[i] := gtr(er[i],sf[i]) 

  shape_prior[i] <- 0.05 
  shape[i] ~ dnExponential( shape_prior[i] )
  norm_gamma_rates[i] := discretizeGamma( shape[i], 4 )
  moves[mv_it++] <- mvScale(shape[i], lambda=1.0, tune=true, weight=1.0)

}


# Specify a uniform topology prior
topology ~ uniformTopology(n_species, names)

# moves on the tree
moves[mv_it++] <- mvNNI(topology, weight=1.0)

#### Specify a prior and moves on the branch lengths #### 
# create a random variable for each branch length using a for loop
for (i in 1:n_branches) {
  # We use here the exponential distribution with rate 1.0 as the branch length prior
  br_lens[i] ~ dnExponential(1.0)
  
  # Add a move for the branch length. We just take a simple scaling move since the value is a positive real number.
  moves[mv_it++] <- mvScale(br_lens[i],lambda=1,tune=true,weight=1) 
}


# Build the tree by combining the topology with the branch length.
phylogeny := treeAssembly(topology, br_lens)



for (i in 1:n_parts){
  phyloSeq[i] ~ phyloCTMC(tree=phylogeny, Q=Q[i], siteRates=norm_gamma_rates[i], nSites=data[i].nchar()[1], type="DNA")
  phyloSeq[i].clamp(data[i])
}


mymodel <- model(topology)

